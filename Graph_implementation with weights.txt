#include<bits/stdc++.h>
using namespace std;
int V=5;

//graph implemented using vector<pair<int, int>>
//BFS tarversal of the graph implemented with weighted nodes.
void addEdge(vector<pair<int, int>> adj[], int u, int v, int w)
{
    adj[u].push_back({v,w});
    

}
void print(vector<pair<int, int>> adj[], int V)
{
    int u;
    int v,w;
    for(u=0;u<V;u++)
    {
        cout<<"Node "<<u<<endl;
        for(auto j=adj[u].begin();j!=adj[u].end();j++)
        { 
            v=j->first;
            w=j->second;
            cout<<"is connected "<<v <<" with weight " <<w<<endl;
        }
        cout<<endl;
    }
}
void bfs(vector<pair<int, int>> adj[],int u)
{   
    bool *visit=new bool[V]{0};
    queue<int> q;
    q.push(u);
    visit[u]=true;

    while(!q.empty())
    {
        int x=q.front();
        q.pop();
        cout<<x<<"->";

        for(auto j=adj[x].begin();j!=adj[x].end();j++)
        {   int y=j->first;
            if(!visit[y])
            {   q.push(y);
                visit[y]=true;
            }
        }
        
    }




}


int main()
{


    vector<pair<int, int>> vec[V];
    addEdge(vec, 0, 1, 10); 
    addEdge(vec, 0, 4, 20); 
    addEdge(vec, 1, 2, 30); 
    addEdge(vec, 1, 3, 40); 
    addEdge(vec, 1, 4, 50); 
    addEdge(vec, 2, 3, 60); 
    addEdge(vec, 3, 4, 70);
     print(vec,V);
     cout<<endl<<endl;
   cout<<"BFS Traversal of the Graph is "<<endl;
    bfs(vec,0);
   return 0;
}